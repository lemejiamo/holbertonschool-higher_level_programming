# ===============================================
# Unit test 7-base_geometry
# ===============================================


>>> BaseGeometry = __import__("7-base_geometry").BaseGeometry

>>> 'area' in dir(BaseGeometry)
True

>>> 'integer_validator' in dir(BaseGeometry)
True

>>> f = BaseGeometry()
>>> f.area()
Traceback (most recent call last):
Exception: area() is not implemented

>>> f.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() takes exactly 3 arguments (1 given)

>>> f.integer_validator(1)
Traceback (most recent call last):
TypeError: integer_validator() takes exactly 3 arguments (2 given)

>>> f.integer_validator(1, 2, 3)
Traceback (most recent call last):
TypeError: integer_validator() takes exactly 3 arguments (4 given)


>>> f.integer_validator("name", -23)
Traceback (most recent call last):
ValueError: name ust be greater than 0

>>> f.integer_validator("name", 0)
Traceback (most recent call last):
ValueError: name ust be greater than 0

>>> f.integer_validator("name", 7)

>>> bg = BaseGeometry()

>>> bg.integer_validator("age",(4,))
Traceback (most recent call last):
TypeError: age must be an integer

>>> bg.integer_validator("age",[3])
Traceback (most recent call last):
TypeError: age must be an integer

>>> bg.integer_validator("age",True)
Traceback (most recent call last):
TypeError: age must be an integer


>>> bg.integer_validator("age",{3, 4})
Traceback (most recent call last):
TypeError: age must be an integer

>>> bg.integer_validator("age",None)
Traceback (most recent call last):
TypeError: age must be an integer



>>> bg.integer_validator("my_int", 12)

>>> bg.integer_validator("width", 89)

>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer

>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age ust be greater than 0


>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance ust be greater than 0


>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

>>> bg.integer_validator("age")
Traceback (most recent call last):
TypeError: integer_validator() takes exactly 3 arguments (2 given)

>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() takes exactly 3 arguments (1 given)

>>> bg.integer_validator("Hello", 7, 8)
Traceback (most recent call last):
TypeError: integer_validator() takes exactly 3 arguments (4 given)